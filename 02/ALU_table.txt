2行目
zx=1 -> x=0
nx=1 -> x=-1。(0,0,...,0)のビット反転だから(1,1,...,1)になる
yも同様に、y=-1
f=1 -> out=x+y=-2。2の補数による加算で、(-1)+(-1)=-2。(1,1,...,1)+(1,1,...,1)=(1,1,...,1,0)となることからも確認できる
no=1 -> ビット反転で(0,0,...,1)となるので1となる

4行目
zx=0, nx=0 -> xはそのまま(何も操作されない)
zy=1, ny=1 -> y=-1 (2行目と同様)
f=1 -> out=x&y=x。ビット単位のAnd演算で、yは(1,1,...,1)なので、xの各ビットが1ならAnd演算で1になるし、0ならAnd演算で0になる。なのでxの各ビットがそのまま残ることになるので、xとなる
no=0 -> 何もしないので、out=x のまま

6行目
fの操作完了までは4行目までと同じなので、out=x
no=1 -> out=!x

8行目
nyの操作完了までは4行目と同じなので、x=x, y=-1
f=1 -> out = x+y = x-1
no=1 -> out = !(x-1) = -x。
!x +1 = -x (テキストより) -> !x = -x-1 -> !(x-1) = -(x-1) -1 = -x

10行目
zx=0, nx=1 -> x= !x = -x-1
zy=1, ny=1 -> y=-1
f=1 -> out = x+y = -x-2
no=1 -> out = !(-x-2) = -(-x-2) -1 = x+1

15行目
zx=0 -> x=0
nx=1 -> x = !x = -x-1
zy=0, ny=0 -> y=y
f=1 -> out = -x-1 + y
no=1 -> out = !(-x-1+y) = -(-x-1+y) -1 = x-y

18行目
zx=0, nx=1 -> x = !x
zy=0, ny=1 -> y = !y
f=0 -> out = x&y = (!x) & (!y)
no=1 -> out = !( (!x) & (!y) ) = x|y


